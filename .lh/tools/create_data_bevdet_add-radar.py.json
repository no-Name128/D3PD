{
    "sourceFile": "tools/create_data_bevdet_add-radar.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1716001172974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716620811756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     dataset = 'nuscenes'\n     version = 'v1.0-trainval'\n     # version = 'v1.0-test'\n     root_path = './data/nuscenes'\n-    extra_tag = 'bevdetv3-nuscenes'\n+    extra_tag = 'bevdetv3-gtboxes-nuscenes'\n     nuscenes_data_prep(\n         root_path=root_path,\n         info_prefix=extra_tag,\n         version=version,\n"
                },
                {
                    "date": 1716620824378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     dataset = 'nuscenes'\n     version = 'v1.0-trainval'\n     # version = 'v1.0-test'\n     root_path = './data/nuscenes'\n-    extra_tag = 'bevdetv3-gtboxes-nuscenes'\n+    extra_tag = 'bevdetv3-nuscenes'\n     nuscenes_data_prep(\n         root_path=root_path,\n         info_prefix=extra_tag,\n         version=version,\n"
                },
                {
                    "date": 1716620855148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     dataset = 'nuscenes'\n     version = 'v1.0-trainval'\n     # version = 'v1.0-test'\n     root_path = './data/nuscenes'\n-    extra_tag = 'bevdetv3-nuscenes'\n+    extra_tag = 'bevdetv3-new_gtboxes-nuscenes'\n     nuscenes_data_prep(\n         root_path=root_path,\n         info_prefix=extra_tag,\n         version=version,\n"
                },
                {
                    "date": 1716620864416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,35 +10,43 @@\n from tools.data_converter.create_gt_database import create_groundtruth_database\n \n \n map_name_from_general_to_detection = {\n-    'human.pedestrian.adult': 'pedestrian',\n-    'human.pedestrian.child': 'pedestrian',\n-    'human.pedestrian.wheelchair': 'ignore',\n-    'human.pedestrian.stroller': 'ignore',\n-    'human.pedestrian.personal_mobility': 'ignore',\n-    'human.pedestrian.police_officer': 'pedestrian',\n-    'human.pedestrian.construction_worker': 'pedestrian',\n-    'animal': 'ignore',\n-    'vehicle.car': 'car',\n-    'vehicle.motorcycle': 'motorcycle',\n-    'vehicle.bicycle': 'bicycle',\n-    'vehicle.bus.bendy': 'bus',\n-    'vehicle.bus.rigid': 'bus',\n-    'vehicle.truck': 'truck',\n-    'vehicle.construction': 'construction_vehicle',\n-    'vehicle.emergency.ambulance': 'ignore',\n-    'vehicle.emergency.police': 'ignore',\n-    'vehicle.trailer': 'trailer',\n-    'movable_object.barrier': 'barrier',\n-    'movable_object.trafficcone': 'traffic_cone',\n-    'movable_object.pushable_pullable': 'ignore',\n-    'movable_object.debris': 'ignore',\n-    'static_object.bicycle_rack': 'ignore',\n+    \"human.pedestrian.adult\": \"pedestrian\",\n+    \"human.pedestrian.child\": \"pedestrian\",\n+    \"human.pedestrian.wheelchair\": \"ignore\",\n+    \"human.pedestrian.stroller\": \"ignore\",\n+    \"human.pedestrian.personal_mobility\": \"ignore\",\n+    \"human.pedestrian.police_officer\": \"pedestrian\",\n+    \"human.pedestrian.construction_worker\": \"pedestrian\",\n+    \"animal\": \"ignore\",\n+    \"vehicle.car\": \"car\",\n+    \"vehicle.motorcycle\": \"motorcycle\",\n+    \"vehicle.bicycle\": \"bicycle\",\n+    \"vehicle.bus.bendy\": \"bus\",\n+    \"vehicle.bus.rigid\": \"bus\",\n+    \"vehicle.truck\": \"truck\",\n+    \"vehicle.construction\": \"construction_vehicle\",\n+    \"vehicle.emergency.ambulance\": \"ignore\",\n+    \"vehicle.emergency.police\": \"ignore\",\n+    \"vehicle.trailer\": \"trailer\",\n+    \"movable_object.barrier\": \"barrier\",\n+    \"movable_object.trafficcone\": \"traffic_cone\",\n+    \"movable_object.pushable_pullable\": \"ignore\",\n+    \"movable_object.debris\": \"ignore\",\n+    \"static_object.bicycle_rack\": \"ignore\",\n }\n classes = [\n-    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n-    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n+    \"car\",\n+    \"truck\",\n+    \"construction_vehicle\",\n+    \"bus\",\n+    \"trailer\",\n+    \"barrier\",\n+    \"motorcycle\",\n+    \"bicycle\",\n+    \"pedestrian\",\n+    \"traffic_cone\",\n ]\n \n \n def get_gt(info):\n@@ -50,26 +58,26 @@\n     Returns:\n         Tensor: GT bboxes.\n         Tensor: GT labels.\n     \"\"\"\n-    ego2global_rotation = info['cams']['CAM_FRONT']['ego2global_rotation']\n-    ego2global_translation = info['cams']['CAM_FRONT'][\n-        'ego2global_translation']\n+    ego2global_rotation = info[\"cams\"][\"CAM_FRONT\"][\"ego2global_rotation\"]\n+    ego2global_translation = info[\"cams\"][\"CAM_FRONT\"][\"ego2global_translation\"]\n     trans = -np.array(ego2global_translation)\n     rot = Quaternion(ego2global_rotation).inverse\n     gt_boxes = list()\n     gt_labels = list()\n-    for ann_info in info['ann_infos']:\n+    for ann_info in info[\"ann_infos\"]:\n         # Use ego coordinate.\n-        if (map_name_from_general_to_detection[ann_info['category_name']]\n-                not in classes\n-                or ann_info['num_lidar_pts'] + ann_info['num_radar_pts'] <= 0):\n+        if (\n+            map_name_from_general_to_detection[ann_info[\"category_name\"]] not in classes\n+            or ann_info[\"num_lidar_pts\"] + ann_info[\"num_radar_pts\"] <= 0\n+        ):\n             continue\n         box = Box(\n-            ann_info['translation'],\n-            ann_info['size'],\n-            Quaternion(ann_info['rotation']),\n-            velocity=ann_info['velocity'],\n+            ann_info[\"translation\"],\n+            ann_info[\"size\"],\n+            Quaternion(ann_info[\"rotation\"]),\n+            velocity=ann_info[\"velocity\"],\n         )\n         box.translate(trans)\n         box.rotate(rot)\n         box_xyz = np.array(box.center)\n@@ -78,10 +86,10 @@\n         box_velo = np.array(box.velocity[:2])\n         gt_box = np.concatenate([box_xyz, box_dxdydz, box_yaw, box_velo])\n         gt_boxes.append(gt_box)\n         gt_labels.append(\n-            classes.index(\n-                map_name_from_general_to_detection[ann_info['category_name']]))\n+            classes.index(map_name_from_general_to_detection[ann_info[\"category_name\"]])\n+        )\n     return gt_boxes, gt_labels\n \n \n def nuscenes_data_prep(root_path, info_prefix, version, max_sweeps=10):\n@@ -97,59 +105,62 @@\n         max_sweeps (int, optional): Number of input consecutive frames.\n             Default: 10\n     \"\"\"\n     nuscenes_converter.create_nuscenes_infos(\n-        root_path, info_prefix, version=version, max_sweeps=max_sweeps)\n+        root_path, info_prefix, version=version, max_sweeps=max_sweeps\n+    )\n \n \n def add_ann_adj_info(extra_tag):\n-    nuscenes_version = 'v1.0-trainval'\n-    dataroot = './data/nuscenes/'\n+    nuscenes_version = \"v1.0-trainval\"\n+    dataroot = \"./data/nuscenes/\"\n     nuscenes = NuScenes(nuscenes_version, dataroot)\n-    for set in ['train', 'val']:\n+    for set in [\"train\", \"val\"]:\n         dataset = pickle.load(\n-            open('./data/nuscenes/%s_infos_%s.pkl' % (extra_tag, set), 'rb'))\n-        for id in range(len(dataset['infos'])):\n+            open(\"./data/nuscenes/%s_infos_%s.pkl\" % (extra_tag, set), \"rb\")\n+        )\n+        for id in range(len(dataset[\"infos\"])):\n             if id % 10 == 0:\n-                print('%d/%d' % (id, len(dataset['infos'])))\n-            info = dataset['infos'][id]\n+                print(\"%d/%d\" % (id, len(dataset[\"infos\"])))\n+            info = dataset[\"infos\"][id]\n             # get sweep adjacent frame info\n-            sample = nuscenes.get('sample', info['token'])\n+            sample = nuscenes.get(\"sample\", info[\"token\"])\n             ann_infos = list()\n-            for ann in sample['anns']:\n-                ann_info = nuscenes.get('sample_annotation', ann)\n-                velocity = nuscenes.box_velocity(ann_info['token'])\n+            for ann in sample[\"anns\"]:\n+                ann_info = nuscenes.get(\"sample_annotation\", ann)\n+                velocity = nuscenes.box_velocity(ann_info[\"token\"])\n                 if np.any(np.isnan(velocity)):\n                     velocity = np.zeros(3)\n-                ann_info['velocity'] = velocity\n+                ann_info[\"velocity\"] = velocity\n                 ann_infos.append(ann_info)\n-            dataset['infos'][id]['ann_infos'] = ann_infos\n-            dataset['infos'][id]['ann_infos'] = get_gt(dataset['infos'][id])\n-            dataset['infos'][id]['scene_token'] = sample['scene_token']\n+            dataset[\"infos\"][id][\"ann_infos\"] = ann_infos\n+            dataset[\"infos\"][id][\"ann_infos\"] = get_gt(dataset[\"infos\"][id])\n+            dataset[\"infos\"][id][\"scene_token\"] = sample[\"scene_token\"]\n \n-            scene = nuscenes.get('scene', sample['scene_token'])\n-            dataset['infos'][id]['occ_path'] = \\\n-                './data/nuscenes/gts/%s/%s'%(scene['name'], info['token'])\n-        with open('./data/nuscenes/%s_infos_%s.pkl' % (extra_tag, set),\n-                  'wb') as fid:\n+            scene = nuscenes.get(\"scene\", sample[\"scene_token\"])\n+            dataset[\"infos\"][id][\"occ_path\"] = \"./data/nuscenes/gts/%s/%s\" % (\n+                scene[\"name\"],\n+                info[\"token\"],\n\\ No newline at end of file\n+            )\n+        with open(\"./data/nuscenes/%s_infos_%s.pkl\" % (extra_tag, set), \"wb\") as fid:\n             pickle.dump(dataset, fid)\n \n \n-if __name__ == '__main__':\n-    dataset = 'nuscenes'\n-    version = 'v1.0-trainval'\n+if __name__ == \"__main__\":\n+    dataset = \"nuscenes\"\n+    version = \"v1.0-trainval\"\n     # version = 'v1.0-test'\n-    root_path = './data/nuscenes'\n-    extra_tag = 'bevdetv3-new_gtboxes-nuscenes'\n+    root_path = \"./data/nuscenes\"\n+    extra_tag = \"bevdetv3-new_gtboxes-nuscenes\"\n     nuscenes_data_prep(\n-        root_path=root_path,\n-        info_prefix=extra_tag,\n-        version=version,\n-        max_sweeps=10)\n+        root_path=root_path, info_prefix=extra_tag, version=version, max_sweeps=10\n+    )\n \n     # print('add_ann_infos')\n     add_ann_adj_info(extra_tag)\n \n-    create_groundtruth_database('NuScenesDataset',\n-                                root_path,\n-                                extra_tag,\n-                                f'{root_path}/{extra_tag}_infos_train.pkl')\n+    create_groundtruth_database(\n+        \"NuScenesDataset\",\n+        root_path,\n+        extra_tag,\n+        f\"{root_path}/{extra_tag}_infos_train.pkl\",\n+    )\n"
                },
                {
                    "date": 1719975463228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,9 @@\n     version = \"v1.0-trainval\"\n     # version = 'v1.0-test'\n     root_path = \"./data/nuscenes\"\n     extra_tag = \"bevdetv3-new_gtboxes-nuscenes\"\n+\n     nuscenes_data_prep(\n         root_path=root_path, info_prefix=extra_tag, version=version, max_sweeps=10\n     )\n \n@@ -162,5 +163,5 @@\n         \"NuScenesDataset\",\n         root_path,\n         extra_tag,\n         f\"{root_path}/{extra_tag}_infos_train.pkl\",\n-    )\n\\ No newline at end of file\n+    )\n"
                },
                {
                    "date": 1719994008894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,9 @@\n             dataset[\"infos\"][id][\"occ_path\"] = \"./data/nuscenes/gts/%s/%s\" % (\n                 scene[\"name\"],\n                 info[\"token\"],\n             )\n+            \n         with open(\"./data/nuscenes/%s_infos_%s.pkl\" % (extra_tag, set), \"wb\") as fid:\n             pickle.dump(dataset, fid)\n \n \n"
                }
            ],
            "date": 1716001172974,
            "name": "Commit-0",
            "content": "# Copyright (c) OpenMMLab. All rights reserved.\nimport pickle\n\nimport numpy as np\nfrom nuscenes import NuScenes\nfrom nuscenes.utils.data_classes import Box\nfrom pyquaternion import Quaternion\n\nfrom tools.data_converter import nuscenes_converter as nuscenes_converter\nfrom tools.data_converter.create_gt_database import create_groundtruth_database\n\n\nmap_name_from_general_to_detection = {\n    'human.pedestrian.adult': 'pedestrian',\n    'human.pedestrian.child': 'pedestrian',\n    'human.pedestrian.wheelchair': 'ignore',\n    'human.pedestrian.stroller': 'ignore',\n    'human.pedestrian.personal_mobility': 'ignore',\n    'human.pedestrian.police_officer': 'pedestrian',\n    'human.pedestrian.construction_worker': 'pedestrian',\n    'animal': 'ignore',\n    'vehicle.car': 'car',\n    'vehicle.motorcycle': 'motorcycle',\n    'vehicle.bicycle': 'bicycle',\n    'vehicle.bus.bendy': 'bus',\n    'vehicle.bus.rigid': 'bus',\n    'vehicle.truck': 'truck',\n    'vehicle.construction': 'construction_vehicle',\n    'vehicle.emergency.ambulance': 'ignore',\n    'vehicle.emergency.police': 'ignore',\n    'vehicle.trailer': 'trailer',\n    'movable_object.barrier': 'barrier',\n    'movable_object.trafficcone': 'traffic_cone',\n    'movable_object.pushable_pullable': 'ignore',\n    'movable_object.debris': 'ignore',\n    'static_object.bicycle_rack': 'ignore',\n}\nclasses = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\n\n\ndef get_gt(info):\n    \"\"\"Generate gt labels from info.\n\n    Args:\n        info(dict): Infos needed to generate gt labels.\n\n    Returns:\n        Tensor: GT bboxes.\n        Tensor: GT labels.\n    \"\"\"\n    ego2global_rotation = info['cams']['CAM_FRONT']['ego2global_rotation']\n    ego2global_translation = info['cams']['CAM_FRONT'][\n        'ego2global_translation']\n    trans = -np.array(ego2global_translation)\n    rot = Quaternion(ego2global_rotation).inverse\n    gt_boxes = list()\n    gt_labels = list()\n    for ann_info in info['ann_infos']:\n        # Use ego coordinate.\n        if (map_name_from_general_to_detection[ann_info['category_name']]\n                not in classes\n                or ann_info['num_lidar_pts'] + ann_info['num_radar_pts'] <= 0):\n            continue\n        box = Box(\n            ann_info['translation'],\n            ann_info['size'],\n            Quaternion(ann_info['rotation']),\n            velocity=ann_info['velocity'],\n        )\n        box.translate(trans)\n        box.rotate(rot)\n        box_xyz = np.array(box.center)\n        box_dxdydz = np.array(box.wlh)[[1, 0, 2]]\n        box_yaw = np.array([box.orientation.yaw_pitch_roll[0]])\n        box_velo = np.array(box.velocity[:2])\n        gt_box = np.concatenate([box_xyz, box_dxdydz, box_yaw, box_velo])\n        gt_boxes.append(gt_box)\n        gt_labels.append(\n            classes.index(\n                map_name_from_general_to_detection[ann_info['category_name']]))\n    return gt_boxes, gt_labels\n\n\ndef nuscenes_data_prep(root_path, info_prefix, version, max_sweeps=10):\n    \"\"\"Prepare data related to nuScenes dataset.\n\n    Related data consists of '.pkl' files recording basic infos,\n    2D annotations and groundtruth database.\n\n    Args:\n        root_path (str): Path of dataset root.\n        info_prefix (str): The prefix of info filenames.\n        version (str): Dataset version.\n        max_sweeps (int, optional): Number of input consecutive frames.\n            Default: 10\n    \"\"\"\n    nuscenes_converter.create_nuscenes_infos(\n        root_path, info_prefix, version=version, max_sweeps=max_sweeps)\n\n\ndef add_ann_adj_info(extra_tag):\n    nuscenes_version = 'v1.0-trainval'\n    dataroot = './data/nuscenes/'\n    nuscenes = NuScenes(nuscenes_version, dataroot)\n    for set in ['train', 'val']:\n        dataset = pickle.load(\n            open('./data/nuscenes/%s_infos_%s.pkl' % (extra_tag, set), 'rb'))\n        for id in range(len(dataset['infos'])):\n            if id % 10 == 0:\n                print('%d/%d' % (id, len(dataset['infos'])))\n            info = dataset['infos'][id]\n            # get sweep adjacent frame info\n            sample = nuscenes.get('sample', info['token'])\n            ann_infos = list()\n            for ann in sample['anns']:\n                ann_info = nuscenes.get('sample_annotation', ann)\n                velocity = nuscenes.box_velocity(ann_info['token'])\n                if np.any(np.isnan(velocity)):\n                    velocity = np.zeros(3)\n                ann_info['velocity'] = velocity\n                ann_infos.append(ann_info)\n            dataset['infos'][id]['ann_infos'] = ann_infos\n            dataset['infos'][id]['ann_infos'] = get_gt(dataset['infos'][id])\n            dataset['infos'][id]['scene_token'] = sample['scene_token']\n\n            scene = nuscenes.get('scene', sample['scene_token'])\n            dataset['infos'][id]['occ_path'] = \\\n                './data/nuscenes/gts/%s/%s'%(scene['name'], info['token'])\n        with open('./data/nuscenes/%s_infos_%s.pkl' % (extra_tag, set),\n                  'wb') as fid:\n            pickle.dump(dataset, fid)\n\n\nif __name__ == '__main__':\n    dataset = 'nuscenes'\n    version = 'v1.0-trainval'\n    # version = 'v1.0-test'\n    root_path = './data/nuscenes'\n    extra_tag = 'bevdetv3-nuscenes'\n    nuscenes_data_prep(\n        root_path=root_path,\n        info_prefix=extra_tag,\n        version=version,\n        max_sweeps=10)\n\n    # print('add_ann_infos')\n    add_ann_adj_info(extra_tag)\n\n    create_groundtruth_database('NuScenesDataset',\n                                root_path,\n                                extra_tag,\n                                f'{root_path}/{extra_tag}_infos_train.pkl')"
        }
    ]
}